package com.iea.etimss.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.Random;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class TestUtilities {
	public static WebDriverWait webDriverWait = null;
	public static RemoteWebDriver driver;
	//public static WebDriver driver;
	public static String filepath;
	public static String getDataFromPropertiesFile(String propertyName) {
		File file = new File(".\\src\\main\\resources\\config.properties");

		FileInputStream fileInput = null;
		try {
			fileInput = new FileInputStream(file);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		Properties prop = new Properties();
		try {
			prop.load(fileInput);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return prop.getProperty(propertyName);
	}
	
	public static boolean isVisible(WebElement element) {
		try {
			return element.isDisplayed();
		} catch (Exception e) {
			return false;
		}
	}

	public static void explicitWait(int iTimeInSec) {
		try {

			if (iTimeInSec > 2)
				waitForSpinner();
			else
				Thread.sleep(0);

		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void waitForSpinner() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		By loadingImage = By.xpath("//td[text()='Please Wait...']");
		WebDriverWait wait = new WebDriverWait(driver, Constants.MAX_WAIT_TIME);
		wait.until(ExpectedConditions.invisibilityOfElementLocated(loadingImage));
	}

	public static void buttonClick(WebElement element, int waitAfterClick) {

		WebDriverWait wait = new WebDriverWait(driver, Constants.MAX_WAIT_TIME);
		wait.until(ExpectedConditions.elementToBeClickable(element));
		drawBorder(element);
		// element.click();
		((JavascriptExecutor) driver).executeScript("arguments[0].click()", element);
		explicitWait(waitAfterClick);

	}

	public static void drawBorder(WebElement element) {
		if (driver instanceof JavascriptExecutor) {
			((JavascriptExecutor) driver).executeScript("arguments[0].style.border='3.5px solid rgb(0, 230, 0)'",
					element);
		}
		// WebDriverWait wait = new WebDriverWait(driver, Constants.MAX_WAIT_TIME);
		// wait.until(ExpectedConditions.visibilityOf(element));
	}

	
	public static void FailedTestScreenShot(String testName) throws IOException {

        File source = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        try {
            FileUtils.copyFile(source, new File("./screenshots/" + testName + ".png"));
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
	
	public static String getSaltString() {
		String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
		StringBuilder salt = new StringBuilder();
		Random rnd = new Random();
		while (salt.length() < 500) { // length of the random string.
			int index = (int) (rnd.nextFloat() * SALTCHARS.length());
			salt.append(SALTCHARS.charAt(index));
		}
		String saltStr = salt.toString();
		return saltStr;

	}
	
	public static int getRandomNumberInRange() {


		
		Random r = new Random();
		return r.nextInt((9 - 0) + 1);
	}
	
	public static String createNewFolder(String user) {
		Date now = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd_MM_yyyy_hhmmss");
		String time = "D:/"+"ETIMS_"+user+"_"+dateFormat.format(now);
		File dir = new File(time);
		dir.mkdir();
		filepath=time;
		return time;
	}
	
	public static void takescreenshot(WebDriver objWebDriver,String name) throws IOException {
		 File screenshotFile = ((TakesScreenshot)objWebDriver).getScreenshotAs(OutputType.FILE);
		 SimpleDateFormat dateFormat = new SimpleDateFormat("dd_MM_yyyy_hhmmss");
		 String filename ="";
		 if(name.equals("")) {
		  filename = filepath+"/ETIMS_"+dateFormat.format( new Date())+".png";
		 }
		 else if(name.startsWith("Error")) {
			 filename = filepath+"/"+name+"_"+dateFormat.format( new Date())+".png"; 
			 }
		 else
		 {
			 filename = filepath+"/Page_"+name+"_"+dateFormat.format( new Date())+".png"; 
		 }
		 FileUtils.copyFile(screenshotFile, new File(filename));
		
	}
	
	
}
